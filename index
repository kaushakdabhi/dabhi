import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectTrigger, SelectContent, SelectItem } from "@/components/ui/select";
import { db, auth } from "../firebaseConfig"; // Firebase config file
import { collection, addDoc, getDocs } from "firebase/firestore";
import { signInWithEmailAndPassword, signOut } from "firebase/auth";

const departments = ["Finance", "HR", "IT", "Operations", "General"];
const userRoles = ["Read", "Write", "Add", "Delete"];

const InvoiceManager = () => {
  const [invoices, setInvoices] = useState([]);
  const [search, setSearch] = useState("");
  const [selectedDepartment, setSelectedDepartment] = useState("All");
  const [uploadDepartment, setUploadDepartment] = useState("General");
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ name: "", role: "Read" });
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchInvoices = async () => {
      const querySnapshot = await getDocs(collection(db, "invoices"));
      const fetchedInvoices = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setInvoices(fetchedInvoices);
    };
    fetchInvoices();
  }, []);

  const handleUpload = async (event) => {
    const file = event.target.files[0];
    if (file) {
      await addDoc(collection(db, "invoices"), {
        name: file.name,
        department: uploadDepartment,
        timestamp: new Date(),
      });
      setInvoices([...invoices, { name: file.name, department: uploadDepartment }]);
    }
  };

  const handleLogin = async () => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      setUser(userCredential.user);
    } catch (error) {
      console.error("Login Error:", error.message);
    }
  };

  const handleLogout = async () => {
    await signOut(auth);
    setUser(null);
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      {!user ? (
        <Card className="max-w-md mx-auto shadow-lg rounded-xl">
          <CardContent className="p-6 flex flex-col gap-4">
            <h2 className="text-xl font-semibold">Login</h2>
            <Input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} className="border p-2 rounded-lg" />
            <Input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} className="border p-2 rounded-lg" />
            <Button className="bg-blue-600 text-white" onClick={handleLogin}>Login</Button>
          </CardContent>
        </Card>
      ) : (
        <>
          <nav className="bg-blue-600 p-4 rounded-lg shadow-md mb-6 text-white flex justify-between items-center">
            <h1 className="text-2xl font-bold">Invoice Manager</h1>
            <Button className="bg-white text-blue-600" onClick={handleLogout}>Logout</Button>
          </nav>

          <Card className="mb-6 shadow-lg rounded-xl">
            <CardContent className="flex flex-col gap-4 p-6">
              <h2 className="text-xl font-semibold">Upload Invoice</h2>
              <Input type="file" onChange={handleUpload} className="border p-2 rounded-lg" />
              <label className="font-medium">Select Department</label>
              <Select onValueChange={setUploadDepartment} value={uploadDepartment}>
                <SelectTrigger className="border p-2 rounded-lg">{uploadDepartment}</SelectTrigger>
                <SelectContent>
                  {departments.map((dept) => (
                    <SelectItem key={dept} value={dept}>{dept}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
};

export default InvoiceManager;
